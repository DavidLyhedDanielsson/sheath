@startuml Architecture

allowmixing

'skinparam Linetype ortho
'skinparam Linetype polyline
hide empty members

<style>
    LineThickness 2
}
</style>

package DirectX12 {
    interface "DrawIndexedInstance" {
        IndexCountPerInstance: UINT
        InstanceCount: UINT
        StartIndexLocation: UINT
        BaseVertexLocation: INT
        StartInstanceLocation: UINT
    }
    interface "IASetIndexBuffer" {
        BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS
        SizeInBytes: UINT
        Format: DXGI_FORMAT
    }
}

package "Assets" {
    struct Vertex {
        Position: Vector3
        Normal: Vector3
        TexCoord: Vector2
    }
    struct Submesh {
        Indices: uint[]
    }
    struct VertexData {
        Name: string
        Submeshes: Submesh[]
        Vertices: Vertex[]
    }
    struct TextureData {
        FilePath: string
        Texels: byte[]
        Width: int
        Height: int
    }
    struct Material {
        Name: String
        AlbedoTexture: String
        AOTexture: String
        BumpTexture: String
        ...
    }
    Material::AlbedoTexture .> TextureData::FilePath
    Material::AOTexture .> TextureData::FilePath
    Material::BumpTexture .> TextureData::FilePath

    database GLTF
    class AssetLoader {
        Import(AssetCatalogue, Callbacks)
    }
    ' class AssetCatalogue {
    '     AddVertexData(VertexData)
    '     AddTextureData(TextureData)
    '     AddMaterial(Material)
    '     AddDefaultMeshMaterial(VertexData, Material) ??
    '     GetX(string name)
    ' }
    ' note top of AssetCatalogue: Add-functions require names for objects
    ' note right of AssetCatalogue::AddDefaultMeshMaterial
    '     Files usually pair meshes and materials
    ' end note

    ' Meshes
    VertexData -[#blue]u-> Submesh
    VertexData -[#blue]u-> Vertex
    Submesh::Indices .[#red].> VertexData::Vertices: Indices of

    ' Textures
    ' TODO: Strings as identifiers?
    ' Material::TextureData .[#red].> TextureData

    AssetLoader -[#blue]u-> GLTF: Loads from
    AssetLoader -[#green]u-> VertexData
    AssetLoader -[#green]u-> Material
    AssetLoader -[#green]u-> TextureData
    ' AssetLoader::Import "Stores instances in" .[#red]r.> AssetCatalogue
}
note top of Assets: Asset data with no connection to graphics API

package HLSL {
    interface Surfaces <<StructuredBuffer>> {
        diffuseTexture: int
        albedoTexture: int
        normalTexture: int
        aoTexture: int
        roughnessTexture: int
        color: float4
    }

    interface Textures <<Texture[]>> {
        textures[]: register(t0, space)
    }

    interface Vertices <<StructuredBuffer>> {
    }

    interface PerObjectData <<cbuffer>> {
        transform: float4x4
        surfaceID: int
    }

    PerObjectData::surfaceID ..> Surfaces: References index of
}

package Graphics {
    struct HeapState {
        uploadBuffer
        uploadHeap
        vertexHeap
        indexHeap
        textureHeap
        constantBufferHeap
        cbvUavSrvDescriptorHeap
    }

    struct VIBufferView {
        IndexBuffer: ID3D12Resource
        VertexBuffer: ID3D12Resource
        IndexStart: int
        IndexCount: int
        IndexBufferTotalCount: int
    }
    note right of VIBufferView::IndexBuffer
        Could maybe be a GPU pointer with the correct offset?
        Would remove need for IndexBufferTotalCount and IndexStart
    end note
    note right of VIBufferView::VertexBuffer
        Only required if multiple vertex buffers are used
    end note

    VIBufferView::IndexCount ...> DrawIndexedInstance::IndexCountPerInstance: Feeds
    VIBufferView::IndexStart ...> DrawIndexedInstance::StartIndexLocation: Feeds
    VIBufferView::IndexBufferTotalCount ...> IASetIndexBuffer::SizeInBytes: Feeds
    VIBufferView::IndexBuffer ...> IASetIndexBuffer::BufferLocation: Feeds

    struct Mesh {
        bufferViews: VIBufferView[]
    }
    note right of Mesh::bufferViews
        Oner per submesh
    end note
    Mesh -[#blue]-> VIBufferView

    struct Texture {
        id: int
    }
    Texture::id ..> HLSL.Textures: References index of

    struct Surface {
        id: int
        PSO: PipelineStateObject
        AlbedoTexture: Texture
        Required textures somehow?? Inheritance?
    }
    Surface::id ..> HLSL.Surfaces: References index of

    class LinearResourceBuilder {
        Mesh CreateMesh(HeapState, VertexData)
        Texture CreateTexture(HeapState, TextureData)
        Surface CreateSurface(HeapState, Materials
    }
    note top of LinearResourceBuilder: Handles both heaps and descriptor heaps for simplicity

    LinearResourceBuilder -[#red]-> HeapState: Uses when building
    LinearResourceBuilder -[#green]-> Texture
    LinearResourceBuilder -[#green]-> Surface
    LinearResourceBuilder -[#green]-> Mesh
    LinearResourceBuilder .[#red].> VertexData
    LinearResourceBuilder .[#red].> TextureData

    struct GraphicsState {
        device
        queues
        lists
        semaphores
    }
    class GraphicsBuilder {
    }
    GraphicsBuilder -[#green]-> GraphicsState

    class PSOBuilder {

    }
}

HeapState .[#red]..> HLSL.Vertices
HeapState .[#red]..> HLSL.Textures
HeapState .[#red]..> HLSL.Surfaces
HeapState .[#red]..> HLSL.PerObjectData

package "Models" {
    struct Submesh {
        Surface: Surface
        VIBufferView: VIBufferView
    }
    note right of Submesh: Vertex buffer shared between submeshes
    struct Model {
        Submeshes: Submesh[]
    }
    class ModelBuilder {
        CreateModel(ResourceBuilder, Mesh, Surface[])
    }
    class Showroom {
        AddShowcase(string name, Model)
    }

    Model -[#blue]u-> Submesh

    ModelBuilder -[#green]u-> Model
    ModelBuilder -[#green]u-> Surface
    ' ModelBuilder::CreateModel "Stores instances in" .[#red]r.> Showroom

    Submesh::Surface .[#red].> Surface
    Submesh::VIBufferView .[#red].> VIBufferView
}
note top of Models: Asset data after connecting to a graphics API

Models.ModelBuilder .[#red].-> Assets.TextureData
Models.ModelBuilder .[#red].-> Graphics.Mesh

package "World" {
    struct InstanceData {
        transform: Matrix
    }

    class Scene {
        AddInstance(Model, InstanceData)
    }
}

@enduml
